import asyncio
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode

TOKEN = os.getenv("BOT_TOKEN")
DATA_FILE = "data.json"
TIMEOUT = 2.5 * 60 * 60

machines = {"–ë–µ–ª–∞—è": [], "–ß—ë—Ä–Ω–∞—è": [], "–†–æ–±–∞": []}
timeouts = {}
user_ids = {}

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ë–µ–ª–∞—è"), KeyboardButton(text="–ß—ë—Ä–Ω–∞—è"), KeyboardButton(text="–†–æ–±–∞")],
        [KeyboardButton(text="üìã –û—á–µ—Ä–µ–¥—å"), KeyboardButton(text="üîÑ –°—Ç–∞—Ç—É—Å")],
        [KeyboardButton(text="üö™ –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å"), KeyboardButton(text="üßº –ó–∞–≤–µ—Ä—à–∏–ª —Å—Ç–∏—Ä–∫—É")]
    ],
    resize_keyboard=True
)

back_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
    resize_keyboard=True
)


def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"–ë–µ–ª–∞—è": [], "–ß—ë—Ä–Ω–∞—è": [], "–†–æ–±–∞": []}


def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(machines, f, ensure_ascii=False, indent=2)


async def notify_next(bot: Bot, machine: str):
    if machines[machine]:
        next_user = machines[machine][0]
        if next_user in user_ids:
            await bot.send_message(user_ids[next_user], f"üß∫ –¢–µ–ø–µ—Ä—å —Ç—ã –ø–µ—Ä–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ {machine}!")
            await start_timeout(bot, machine, next_user)


async def start_timeout(bot: Bot, machine: str, username: str):
    if machine in timeouts:
        timeouts[machine].cancel()

    async def task():
        await asyncio.sleep(TIMEOUT)
        if machines[machine] and machines[machine][0] == username:
            machines[machine].pop(0)
            save_data()
            if username in user_ids:
                await bot.send_message(user_ids[username], f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ. –¢—ã —É–¥–∞–ª—ë–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ {machine}.")
            await notify_next(bot, machine)

    timeouts[machine] = asyncio.create_task(task())


dp = Dispatcher()


@dp.message(CommandStart())
async def handle_start(message: types.Message):
    username = message.from_user.username or message.from_user.first_name
    user_ids[username] = message.from_user.id
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –º–∞—à–∏–Ω–∫—É:", reply_markup=main_menu)


@dp.message(Command("reset"))
async def handle_reset(message: types.Message):
    for m in machines:
        machines[m] = []
    save_data()
    await message.answer("–û—á–µ—Ä–µ–¥–∏ —Å–±—Ä–æ—à–µ–Ω—ã.", reply_markup=main_menu)


@dp.message()
async def handle_message(message: types.Message):
    username = message.from_user.username or message.from_user.first_name
    user_ids[username] = message.from_user.id
    text = message.text

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

    elif text == "üìã –û—á–µ—Ä–µ–¥—å":
        lines = []
        for m in machines:
            queue = "\n".join(machines[m]) if machines[m] else "‚Äî –ø—É—Å—Ç–æ"
            lines.append(f"{m}:\n{queue}")
        await message.answer("\n\n".join(lines), reply_markup=back_menu)

    elif text == "üîÑ –°—Ç–∞—Ç—É—Å":
        lines = [f"{m}: {machines[m][0] if machines[m] else '–°–≤–æ–±–æ–¥–Ω–∞'}" for m in machines]
        await message.answer("\n".join(lines), reply_markup=back_menu)

    elif text == "üö™ –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å":
        removed = []
        for m in machines:
            if username in machines[m]:
                was_first = machines[m][0] == username
                machines[m].remove(username)
                if was_first:
                    await notify_next(message.bot, m)
                removed.append(m)
        save_data()
        if removed:
            await message.answer(f"üö™ –ü–æ–∫–∏–Ω—É–ª: {', '.join(removed)}", reply_markup=back_menu)
        else:
            await message.answer("–¢—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏.", reply_markup=back_menu)

    elif text == "üßº –ó–∞–≤–µ—Ä—à–∏–ª —Å—Ç–∏—Ä–∫—É":
        done = []
        for m in machines:
            if machines[m] and machines[m][0] == username:
                machines[m].pop(0)
                if m in timeouts:
                    timeouts[m].cancel()
                await notify_next(message.bot, m)
                done.append(m)
        save_data()
        if done:
            await message.answer(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {', '.join(done)}", reply_markup=back_menu)
        else:
            await message.answer("–¢—ã –Ω–µ –ø–µ—Ä–≤—ã–π –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–π –º–∞—à–∏–Ω–µ.", reply_markup=back_menu)

    elif text in machines:
        if username in machines[text]:
            pos = machines[text].index(username) + 1
            await message.answer(f"–¢—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ {text}, –ø–æ–∑–∏—Ü–∏—è: {pos}", reply_markup=back_menu)
        else:
            machines[text].append(username)
            save_data()
            pos = len(machines[text])
            if pos == 1:
                await message.answer(
                    f"‚úÖ –¢—ã –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ {text}. –¢—ã –ø–µ—Ä–≤—ã–π!\n‚è∞ –£ —Ç–µ–±—è –µ—Å—Ç—å 2.5 —á–∞—Å–∞.",
                    reply_markup=back_menu
                )
                await start_timeout(message.bot, text, username)
            else:
                await message.answer(
                    f"üîî –¢—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ {text}, —Ç–≤–æ—è –ø–æ–∑–∏—Ü–∏—è: {pos}",
                    reply_markup=back_menu
                )
    else:
        await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=main_menu)


async def main():
    global machines
    machines.update(load_data())
    bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

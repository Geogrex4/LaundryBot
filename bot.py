
import json
import os
import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

DATA_FILE = "data.json"
TIMEOUT_SECONDS = 2.5 * 60 * 60  # 2.5 —á–∞—Å–∞

machines = {
    "–ë–µ–ª–∞—è": [],
    "–ß—ë—Ä–Ω–∞—è": [],
    "–†–æ–±–∞": []
}
timeouts = {}  # machine_name -> asyncio.Task
user_ids = {}  # username -> telegram_id

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"–ë–µ–ª–∞—è": [], "–ß—ë—Ä–Ω–∞—è": [], "–†–æ–±–∞": []}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(machines, f, ensure_ascii=False, indent=2)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
main_menu = [["–ë–µ–ª–∞—è", "–ß—ë—Ä–Ω–∞—è", "–†–æ–±–∞"],
             ["üìã –û—á–µ—Ä–µ–¥—å", "üîÑ –°—Ç–∞—Ç—É—Å"],
             ["üö™ –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å", "üßº –ó–∞–≤–µ—Ä—à–∏–ª —Å—Ç–∏—Ä–∫—É"]]
back_button = [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]]

main_reply = ReplyKeyboardMarkup(main_menu, resize_keyboard=True)
back_reply = ReplyKeyboardMarkup(back_button, resize_keyboard=True)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–º—É
async def notify_next(machine_name, context):
    queue = machines[machine_name]
    if queue:
        next_user = queue[0]
        if next_user in user_ids:
            await context.bot.send_message(
                chat_id=user_ids[next_user],
                text=f"üß∫ –¢—ã —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ {machine_name}!"
            )
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        start_timeout(machine_name, next_user, context)

# –¢–∞–π–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ 2.5 —á–∞—Å–æ–≤
def start_timeout(machine_name, username, context):
    if machine_name in timeouts:
        timeouts[machine_name].cancel()

    async def timeout_task():
        try:
            await asyncio.sleep(TIMEOUT_SECONDS)
            if machines[machine_name] and machines[machine_name][0] == username:
                machines[machine_name].pop(0)
                save_data()
                await context.bot.send_message(
                    chat_id=user_ids.get(username),
                    text=f"‚è∞ –í—Ä–µ–º—è —Å—Ç–∏—Ä–∫–∏ –Ω–∞ {machine_name} –∏—Å—Ç–µ–∫–ª–æ. –¢—ã –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—ë–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏."
                )
                await notify_next(machine_name, context)
        except asyncio.CancelledError:
            pass

    task = asyncio.create_task(timeout_task())
    timeouts[machine_name] = task

# –ö–æ–º–∞–Ω–¥—ã
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    username = user.username or user.first_name
    user_ids[username] = user.id
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –º–∞—à–∏–Ω–∫—É –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_reply)

async def cmd_reload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    username = user.username or user.first_name
    user_ids[username] = user.id
    await update.message.reply_text("üîÅ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_reply)

async def cmd_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for name in machines:
        machines[name] = []
    save_data()
    await update.message.reply_text("–û—á–µ—Ä–µ–¥–∏ —Å–±—Ä–æ—à–µ–Ω—ã.", reply_markup=main_reply)

# –°–æ–æ–±—â–µ–Ω–∏—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    username = user.username or user.first_name
    user_ids[username] = user.id
    text = update.message.text

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_reply)
        return

    if text == "üîÑ –°—Ç–∞—Ç—É—Å":
        status = "\n".join([f"{m}: {machines[m][0] if machines[m] else '–°–≤–æ–±–æ–¥–Ω–∞'}" for m in machines])
        await update.message.reply_text("–°—Ç–∞—Ç—É—Å –º–∞—à–∏–Ω–æ–∫:\n" + status, reply_markup=back_reply)
        return

    if text == "üìã –û—á–µ—Ä–µ–¥—å":
        q = ""
        for m, queue in machines.items():
            q += f"{m}:\n" + ("\n".join([f" - {u}" for u in queue]) if queue else " - –ø—É—Å—Ç–æ") + "\n\n"
        await update.message.reply_text(q.strip(), reply_markup=back_reply)
        return

    if text == "üö™ –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å":
        left = []
        for name in machines:
            if username in machines[name]:
                was_first = machines[name][0] == username
                machines[name].remove(username)
                left.append(name)
                if was_first:
                    await notify_next(name, context)
        save_data()
        msg = f"üö™ –¢—ã –ø–æ–∫–∏–Ω—É–ª –æ—á–µ—Ä–µ–¥–∏: {', '.join(left)}." if left else "–¢—ã –Ω–µ —Å—Ç–æ–∏—à—å –Ω–∏ –≤ –æ–¥–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏."
        await update.message.reply_text(msg, reply_markup=back_reply)
        return

    if text == "üßº –ó–∞–≤–µ—Ä—à–∏–ª —Å—Ç–∏—Ä–∫—É":
        done = []
        for name in machines:
            if machines[name] and machines[name][0] == username:
                machines[name].pop(0)
                done.append(name)
                await notify_next(name, context)
                if name in timeouts:
                    timeouts[name].cancel()
        save_data()
        msg = f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {', '.join(done)}." if done else "–¢—ã –Ω–µ –±—ã–ª –ø–µ—Ä–≤—ã–º –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–π –º–∞—à–∏–Ω–∫–µ."
        await update.message.reply_text(msg, reply_markup=back_reply)
        return

    if text in machines:
        queue = machines[text]
        if username in queue:
            pos = queue.index(username) + 1
            await update.message.reply_text(
                f"–¢—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –∫ {text}. –ü–æ–∑–∏—Ü–∏—è: {pos}", reply_markup=back_reply)
        else:
            queue.append(username)
            save_data()
            pos = len(queue)
            if pos == 1:
                await update.message.reply_text(
                    f"‚úÖ –¢—ã –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ {text}. –¢—ã –ø–µ—Ä–≤—ã–π!\n\n‚è∞ –£ —Ç–µ–±—è –µ—Å—Ç—å 2.5 —á–∞—Å–∞. "
                    f"–ï—Å–ª–∏ –Ω–µ –Ω–∞–∂–º—ë—à—å ¬´üßº –ó–∞–≤–µ—Ä—à–∏–ª —Å—Ç–∏—Ä–∫—É¬ª, —Ç–µ–±—è —É–¥–∞–ª–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                    reply_markup=back_reply)
                start_timeout(text, username, context)
            else:
                await update.message.reply_text(
                    f"üîî –¢—ã –∑–∞–ø–∏—Å–∞–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∫ {text}. –¢–≤–æ—è –ø–æ–∑–∏—Ü–∏—è: {pos}.", reply_markup=back_reply)
        return

    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=main_reply)

# –ó–∞–ø—É—Å–∫
def main():
    global machines
    machines.update(load_data())

    import os
    app = Application.builder().token(os.environ["BOT_TOKEN"]).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("reload", cmd_reload))
    app.add_handler(CommandHandler("reset", cmd_reset))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()
